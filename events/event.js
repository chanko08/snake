// Generated by CoffeeScript 1.3.3
(function() {
  var EventList, Events, Modifiers, keyCharToCode, keyCodeToChar,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.EventHandler = (function() {
    /*
        # constructor
        # Takes in an element id to the element it should attach event handlers such as keyboard and mouse to.
    */

    function EventHandler(canvas_id) {
      this._on_mouse_up = __bind(this._on_mouse_up, this);

      this._on_mouse_down = __bind(this._on_mouse_down, this);

      this._on_key_up = __bind(this._on_key_up, this);

      this._on_key_down = __bind(this._on_key_down, this);

      this._on_focus = __bind(this._on_focus, this);

      this._on_blur = __bind(this._on_blur, this);

      var c, _i, _len;
      this.canvas = document.getElementById(canvas_id);
      this.callbacks = {};
      for (_i = 0, _len = EventList.length; _i < _len; _i++) {
        c = EventList[_i];
        this.callbacks[c] = [];
      }
      this.keys_down = {};
      this.canvas.addEventListener(Events.FOCUS, this._on_focus, false);
      this.canvas.addEventListener(Events.BLUR, this._on_blur, false);
      this.canvas.addEventListener(Events.KEYDOWN, this._on_key_down, false);
      this.canvas.addEventListener(Events.KEYUP, this._on_key_up, false);
      this.canvas.addEventListener(Events.MOUSEDOWN, this._on_mouse_down, false);
      this.canvas.addEventListener(Events.MOUSEUP, this._on_mouse_up, false);
      this.canvas.addEventListener(Events.CONTEXTMENU, this._on_context_menu, false);
      this.canvas.focus();
    }

    EventHandler.prototype._on_blur = function(e) {
      e.preventDefault();
      return this.signal_event(Events.BLUR, null);
    };

    EventHandler.prototype._on_focus = function(e) {
      e.preventDefault();
      return this.signal_event(Events.FOCUS, null);
    };

    EventHandler.prototype._on_key_down = function(e) {
      var key;
      e.preventDefault();
      key = e.which || e.keyCode;
      if (this.keys_down[key] !== true) {
        this.signal_event(Events.KEYDOWN, this._make_canvas_key_event(e));
      }
      return this.keys_down[key] = true;
    };

    EventHandler.prototype._on_key_up = function(e) {
      var key;
      e.preventDefault();
      this.signal_event(Events.KEYUP, this._make_canvas_key_event(e));
      key = e.which || e.keyCode;
      return this.keys_down[key] = false;
    };

    EventHandler.prototype._make_canvas_key_event = function(e) {
      var ev, keycode, mod;
      keycode = e.which || e.keyCode;
      mod = 0;
      if (e.shiftKey) {
        mod = mod | Modifiers.SHIFT;
      }
      if (e.ctrlKey) {
        mod = mod | Modifiers.CTRL;
      }
      if (e.altKey) {
        mod = mod | Modifiers.ALT;
      }
      ev = {
        code: keycode,
        mod: mod
      };
      return ev;
    };

    EventHandler.prototype._on_mouse_down = function(e) {
      e.preventDefault();
      this.signal_event(Events.MOUSEDOWN, this._make_canvas_mouse_event(e));
      return this.canvas.focus();
    };

    EventHandler.prototype._on_mouse_up = function(e) {
      e.preventDefault();
      return this.signal_event(Events.MOUSEUP, this._make_canvas_mouse_event(e));
    };

    EventHandler.prototype._make_canvas_mouse_event = function(e) {
      var ev, rect, root;
      rect = this.canvas.getBoundingClientRect();
      root = document.documentElement;
      ev = {
        x: e.clientX - rect.top - root.scrollTop,
        y: e.clientY - rect.left - root.scrollLeft,
        button: e.button
      };
      return ev;
    };

    EventHandler.prototype._on_context_menu = function(e) {
      return e.preventDefault();
    };

    EventHandler.prototype.add_callback = function(evname, callback) {
      if (evname in this.callbacks) {
        this.callbacks[evname].push(callback);
      } else {
        this.callbacks[evname] = [];
        this.callbacks[evname].push(callback);
      }
      return console.log("callbacks", this.callbacks);
    };

    EventHandler.prototype.signal_event = function(evname, evobj) {
      var c, ev, _i, _len, _ref, _results;
      console.log("event signalled", evname);
      ev = {
        name: evname,
        msg: evobj
      };
      if (evname in this.callbacks) {
        _ref = this.callbacks[evname];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c(ev));
        }
        return _results;
      }
    };

    return EventHandler;

  })();

  Events = {
    KEYDOWN: "keydown",
    KEYUP: "keyup",
    MOUSEUP: "mouseup",
    MOUSEDOWN: "mousedown",
    FOCUS: "focus",
    BLUR: "blur",
    CONTEXTMENU: "contextmenu"
  };

  EventList = [Events.MOUSEDOWN, Events.MOUSEUP, Events.KEYUP, Events.KEYDOWN, Events.CONTEXTMENU];

  Modifiers = {
    SHIFT: 1,
    CTRL: 2,
    ALT: 4
  };

  keyCodeToChar = {
    8: "Backspace",
    9: "Tab",
    13: "Enter",
    16: "Shift",
    17: "Ctrl",
    18: "Alt",
    19: "Pause/Break",
    20: "Caps Lock",
    27: "Esc",
    32: "Space",
    33: "Page Up",
    34: "Page Down",
    35: "End",
    36: "Home",
    37: "Left",
    38: "Up",
    39: "Right",
    40: "Down",
    45: "Insert",
    46: "Delete",
    48: "0",
    49: "1",
    50: "2",
    51: "3",
    52: "4",
    53: "5",
    54: "6",
    55: "7",
    56: "8",
    57: "9",
    65: "A",
    66: "B",
    67: "C",
    68: "D",
    69: "E",
    70: "F",
    71: "G",
    72: "H",
    73: "I",
    74: "J",
    75: "K",
    76: "L",
    77: "M",
    78: "N",
    79: "O",
    80: "P",
    81: "Q",
    82: "R",
    83: "S",
    84: "T",
    85: "U",
    86: "V",
    87: "W",
    88: "X",
    89: "Y",
    90: "Z",
    91: "Windows",
    93: "Right Click",
    96: "Numpad 0",
    97: "Numpad 1",
    98: "Numpad 2",
    99: "Numpad 3",
    100: "Numpad 4",
    101: "Numpad 5",
    102: "Numpad 6",
    103: "Numpad 7",
    104: "Numpad 8",
    105: "Numpad 9",
    106: "Numpad *",
    107: "Numpad +",
    109: "Numpad -",
    110: "Numpad .",
    111: "Numpad /",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "Num Lock",
    145: "Scroll Lock",
    182: "My Computer",
    183: "My Calculator",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  keyCharToCode = {
    "Backspace": 8,
    "Tab": 9,
    "Enter": 13,
    "Shift": 16,
    "Ctrl": 17,
    "Alt": 18,
    "Pause/Break": 19,
    "Caps Lock": 20,
    "Esc": 27,
    "Space": 32,
    "Page Up": 33,
    "Page Down": 34,
    "End": 35,
    "Home": 36,
    "Left": 37,
    "Up": 38,
    "Right": 39,
    "Down": 40,
    "Insert": 45,
    "Delete": 46,
    "0": 48,
    "1": 49,
    "2": 50,
    "3": 51,
    "4": 52,
    "5": 53,
    "6": 54,
    "7": 55,
    "8": 56,
    "9": 57,
    "A": 65,
    "B": 66,
    "C": 67,
    "D": 68,
    "E": 69,
    "F": 70,
    "G": 71,
    "H": 72,
    "I": 73,
    "J": 74,
    "K": 75,
    "L": 76,
    "M": 77,
    "N": 78,
    "O": 79,
    "P": 80,
    "Q": 81,
    "R": 82,
    "S": 83,
    "T": 84,
    "U": 85,
    "V": 86,
    "W": 87,
    "X": 88,
    "Y": 89,
    "Z": 90,
    "Windows": 91,
    "Right Click": 93,
    "Numpad 0": 96,
    "Numpad 1": 97,
    "Numpad 2": 98,
    "Numpad 3": 99,
    "Numpad 4": 100,
    "Numpad 5": 101,
    "Numpad 6": 102,
    "Numpad 7": 103,
    "Numpad 8": 104,
    "Numpad 9": 105,
    "Numpad *": 106,
    "Numpad +": 107,
    "Numpad -": 109,
    "Numpad .": 110,
    "Numpad /": 111,
    "F1": 112,
    "F2": 113,
    "F3": 114,
    "F4": 115,
    "F5": 116,
    "F6": 117,
    "F7": 118,
    "F8": 119,
    "F9": 120,
    "F10": 121,
    "F11": 122,
    "F12": 123,
    "Num Lock": 144,
    "Scroll Lock": 145,
    "My Computer": 182,
    "My Calculator": 183,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222
  };

}).call(this);
